// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/frabits/frabit/pkg/api"
	"github.com/frabits/frabit/pkg/config"
	"github.com/frabits/frabit/pkg/infra/db"
	"github.com/frabits/frabit/pkg/server/bg_services"
	"github.com/frabits/frabit/pkg/services/agent"
	"github.com/frabits/frabit/pkg/services/audit"
	"github.com/frabits/frabit/pkg/services/auth"
	"github.com/frabits/frabit/pkg/services/backup"
	"github.com/frabits/frabit/pkg/services/cleanup"
	"github.com/frabits/frabit/pkg/services/deploy"
	"github.com/frabits/frabit/pkg/services/license"
	"github.com/frabits/frabit/pkg/services/login"
	"github.com/frabits/frabit/pkg/services/notifications"
	"github.com/frabits/frabit/pkg/services/org"
	"github.com/frabits/frabit/pkg/services/secrets"
	"github.com/frabits/frabit/pkg/services/team"
	"github.com/frabits/frabit/pkg/services/updatechecker"
	"github.com/frabits/frabit/pkg/services/user"
	"github.com/google/wire"
)

// Injectors from wire.go:

func Initialize() (*Server, error) {
	configConfig := config.ProviderConfig()
	metaStore, err := db.New(configConfig)
	if err != nil {
		return nil, err
	}
	service := auth.ProviderService(configConfig, metaStore)
	backupService := backup.ProviderMySQLBackup()
	deployService := deploy.ProviderService()
	agentService := agent.ProviderAgentService(configConfig, metaStore)
	userService := user.ProviderService(configConfig, metaStore)
	loginService := login.ProviderLoginNative(configConfig, userService)
	orgService := org.ProviderService(configConfig, metaStore)
	teamService := team.ProviderService(configConfig, metaStore)
	auditService := audit.ProviderService(configConfig, metaStore)
	httpServer := api.ProviderHTTPServer(configConfig, service, backupService, deployService, agentService, loginService, orgService, teamService, userService, auditService)
	cleanupService := cleanup.ProviderService()
	notificationsService := notifications.ProviderService()
	frabitService := updatechecker.ProviderFrabitService()
	licenseService := license.ProviderService(configConfig, metaStore)
	backgroundServiceRegistry := bg_services.ProviderBackgroundServiceRegistry(cleanupService, notificationsService, deployService, frabitService, licenseService)
	server := NewServer(configConfig, httpServer, backgroundServiceRegistry, metaStore)
	return server, nil
}

// wire.go:

var wireSet = wire.NewSet(db.New, config.ProviderConfig, agent.ProviderAgentService, auth.ProviderService, audit.ProviderService, backup.ProviderMySQLBackup, cleanup.ProviderService, deploy.ProviderService, login.ProviderLoginNative, license.ProviderService, secrets.ProviderSecrets, notifications.ProviderService, org.ProviderService, team.ProviderService, user.ProviderService, updatechecker.ProviderFrabitService, bg_services.ProviderBackgroundServiceRegistry, api.ProviderHTTPServer, NewServer)
